<?php /** @var $entity Oscar\Entity\Activity */ ?>
<link rel="stylesheet" href="/js/vendor/timewalker/src/styles/timewalker.css" />
<link rel="stylesheet" href="/js/oscar/dist/milestones.css" />
<link rel="stylesheet" href="/js/oscar/dist/Payments.css" />


<div class="container activity-full">

    <nav>
        <a href="javascript:history.back()">
            <i class=" icon-angle-left"></i>Retour</a>
    </nav>

    <header class="activity-header oscar-header jumbotron has-btn">
        <h2>
            <?php if( $entity->getProject() ): $labelBtn = "Modifier le projet"; ?>
                <small class="text-light">
                    <?= $this->link()->project($entity->getProject()) ?> : </small>
            <?php else: $labelBtn = "Affecter un projet existant"; ?>
                <small>Sans projet</small>
            <?php endif; ?>
        </h2>
        <?php if( $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_EDIT, $entity) ): ?>
            <div class="dropdown" style="position: absolute; right: 12px; top: 12px">
                <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1"
                        data-toggle="dropdown"
                        aria-haspopup="true" aria-expanded="true">
                    <i class="icon-cog"></i>
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenu1">
                    <?php if ($this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_CHANGE_PROJECT, $entity)): ?>
                        <li class="dropdown-header"><i class="icon-cubes"></i> Projet</li>
                        <li>
                            <a href="<?= $this->url('contract/moveToProject', ['id'=>$entity->getId()]) ?>">
                                <?= $labelBtn ?>
                            </a>
                        </li>
                        <li>
                            <a href="<?= $this->url('project/new') ?>?ids=<?= $entity->getId() ?>">
                                Créer un nouveau projet à partir de cette activité
                            </a>
                        </li>

                    <?php endif; ?>
                    <li class="dropdown-header">
                        <i class="icon-cube"></i>
                        Données de l'activité
                    </li>
                    <li>
                        <a href="<?= $this->url('contract/edit', ['id'=>$entity->getId()]) ?>" class="smoke">
                            Modifier les informations
                        </a>
                    </li>
                    <?php if ($this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_DUPLICATE, $entity)): ?>
                        <li>
                            <a href="#" class="smoke" id="cloneBtn">
                                Dupliquer cette activité
                            </a>
                        </li>
                    <?php endif; ?>
                </ul>
            </div>
        <?php endif; ?>

        <div>
            <small>
                 <span class="picto status-<?= $entity->getStatus() ?>">
                    <i class="icon"></i>
                    <?= $entity->getStatusLabel() ?>
                 </span>
                :::
                 <span>
                    <i class="<?= $entity->getTypeSlug() ?>"></i>
                    <span class="text-light"><?= $this->activityTypeHlp()->chain($entity->getActivityType()) ?></span>
                 </span>
            </small>
        </div>

        <h1>

        </span>
            <span> <i class="icon-cube"></i> <?= $entity->getLabel() ?></span>
            <?php if ($this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_PAYMENT_SHOW)): ?>
            <div class="budget">
                <em>Budget</em>
                <strong><?= $this->currency($entity) ?></strong>
                <?php if( $entity->getFraisDegestion() ): ?>
                    <div>
                        <small>
                            Frais de gestion :
                            <b><?= $entity->getFraisDeGestionDisplay() ?></b>
                        </small>
                        <?php if( $entity->getFraisDeGestionPartHebergeur() ):?>
                        <br><small>
                            Part hébergeur :
                            <b><?= $entity->getFraisDeGestionPartHebergeurDisplay() ?></b>
                        </small>
                        <?php endif; ?>
                    </div>
                <?php endif ?>
                <?php if( $entity->getTva() ): ?>
                    <div><small>
                            TVA :
                            <b><?= $entity->getTva() ?></b>
                        </small>
                    </div>
                <?php endif ?>

            </div>
            <?php endif; ?>
        </h1>

        <?php if( $entity->getDescription() ): ?>
        <p class="baseline">
            <small><?= $entity->getDescription() ?></small>
        </p>
        <?php endif; ?>

        <p class="dates text-highlight baseline">
            Début : <time><?= $this->moment($entity->getDateStart()) ?></time> /
            Fin : <time><?= $this->moment($entity->getDateEnd()) ?></time> -
            Signé le <time><?= $this->moment($entity->getDateSigned()) ?></time>
        </p>

        <p class="texthighlight baseline">
            <?= $this->translate("N° Oscar") ?> : <strong><?= $entity->getOscarNum() ?></strong><br/>
            PFI :
            <?php if( $entity->getCodeEOTP() ): ?>
                <strong><?= $entity->getCodeEOTP() ?></strong> -
            <?php endif; ?>
            <?php if( $entity->getDateOpened() ): ?>
                ouvert le <time><?= $this->moment($entity->getDateOpened()) ?></time>
            <?php else: ?>
                non daté
            <?php endif; ?><br/>

            <?php if( $entity->getNumbers() ): ?>
            Autre numérotation :
            <?php foreach( $entity->getNumbers() as $key=>$value ): ?>
                <span class="number">
                        <span class="key"><?= $key ?></span>
                        <span class="value"><?= $value ?></span>
                    </span>
            <?php endforeach; ?>
            <?php endif; ?>
            Disciplines:  <?php if( $entity->getDisciplines() ): ?>
                <?php foreach ($entity->getDisciplines() as $d) : ?>
                    <span class="cartouche xs"><?= $d ?></span>
                <?php endforeach; ?>
            <?php endif; ?>
        </p>
    </header>

    <div class="row">
        <div class="col-md-8">

            <?php if ($this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_ORGANIZATION_SHOW, $entity)): ?>
                <section class="has-btn">
                    <h2>
                        <i class="icon-group"></i>
                        Membres
                    </h2>
                    <section id="organizations" class="has-btn"></section>
                    <?php if( $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_PERSON_ACCESS, $entity)): ?>
                        <section id="involved"></section>
                        <script>
                            require(['vue'], function(Vue){
                                new Vue({
                                    el: '#involved',
                                    template: `<div>
                                <h4 @click="displayed = !displayed" style="cursor: pointer">
                                    <i class="icon-right-dir" v-show="displayed === false"></i>
                                    <i class="icon-sort-down" v-show="displayed === true"></i>
                                    Personnes pouvant voir cette activité
                                </h4>
                                <p class="text-muted"><small>Personnes disposant d'un droit d'accès (à minima en lecture) dans cette activité</small></p>
                                <section v-show="displayed">
                                    <div class="input-group">
                                      <span class="input-group-addon">
                                          <i class="icon-filter"></i>
                                      </span>
                                      <input type="search" v-model="filter" class="form-control" placeholder="Filtrer..." />
                                    </div>

                                    <span v-for="p in filteredPersons" class="cartouche xs">
                                        {{ p.displayname }}
                                        <span class="addon" v-if="p.affectation">{{ p.affectation }}</span>
                                    </span>
                                </section>
                                </div>`,
                                    data: {
                                        displayed: false,
                                        filter: "",
                                        persons: <?= $involvedPerson ?>
                                    },
                                    computed: {
                                        filteredPersons(){
                                            var ret;
                                            if( !this.filter ) ret = this.persons;
                                            else {
                                                var criteria = this.filter;
                                                ret = this.persons.filter(p => p.displayname.indexOf(criteria)>=0 ||  p.affectation.indexOf(criteria)>=0 );
                                            }
                                            return ret.sort( (a, b) => a.displayname.localeCompare(b.displayname));

                                        }
                                    }
                                })
                            })
                        </script>
                    <?php endif; ?>
                </section>
                <script>
                    require(['vue', 'vue-resource', 'EntityWithRole', 'moment'], function(Vue, VueResource, EntityWithRole, moment){
                        Vue.use(VueResource);
                        Vue.http.options.emulateJSON = true;
                        Vue.http.options.emulateHTTP = true;
                        new Vue({
                            el: "#organizations",
                            render(h){
                                return h(EntityWithRole.default, { props: {
                                        url: "<?= $this->url('contract/persons', ['id' => $entity->getId()]) ?>",
                                        urlNew: "<?= $this->url('personactivity/new', ['idenroller' => $entity->getId()]) ?>",
                                        manage: <?= $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_PERSON_MANAGE, $entity) ? "true" : 'false' ?>,
                                        title: "Personne",
                                        roles: <?= json_encode($rolesPersons) ?>,
                                        moment: moment
                                    }});
                            }

                        })
                    });
                </script>
            <?php endif; ?>


            <?php if ($this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_ORGANIZATION_SHOW, $entity)): ?>
            <section class="has-btn">
                <h2>
                    <i class="icon-building-filled"></i>
                    Partenaires
                </h2>
                <section id="organizations" class="has-btn"></section>
            </section>
            <script>
                require(['vue', 'vue-resource', 'EntityWithRole', 'moment'], function(Vue, VueResource, EntityWithRole, moment){
                    Vue.use(VueResource);
                    Vue.http.options.emulateJSON = true;
                    Vue.http.options.emulateHTTP = true;
                    new Vue({
                        el: "#organizations",
                        render(h){
                            return h(EntityWithRole.default, { props: {
                                    url: "<?= $this->url('contract/organizations', ['id' => $entity->getId()]) ?>",
                                    urlNew: "<?= $this->url('organizationactivity/new', ['idenroller' => $entity->getId()]) ?>",
                                    manage: <?= $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_ORGANIZATION_MANAGE, $entity) ? "true" : 'false' ?>,
                                    title: "Organisation",
                                    roles: <?= json_encode($rolesOrganizations) ?>,
                                    moment: moment
                                }});
                        }

                    })
                });
            </script>
            <?php endif; ?>

            <?php
            $manage = $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_DOCUMENT_MANAGE, $entity);

            if( $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_DOCUMENT_SHOW, $entity) ): ?>
                <section id="documents" class="has-btn">
                    <h2><i class="icon-book"></i> Documents</h2>

                    <?php if( $manage ): ?>
                        <div class="btn-area">
                            <a href="<?= $this->url('contractdocument/upload', ['idactivity' => $entity->getId() ]) ?>" class="smoke">
                                <i class="icon-book"></i>
                                Téléverser un document
                            </a>
                        </div>
                    <?php endif; ?>
                    
                    <nav>
                        <?php foreach($generatedDocuments as $key=>$infos ): ?>
                            <a href="<?= $this->url('contract/generatedocument', ['id' => $entity->getId(), 'doc' => $key]) ?>" class="btn btn-primary">
                                <?= $infos['label'] ?>
                            </a>
                        <?php endforeach; ?>
                    </nav>


                    <script id="documents-list-template" type="text/x-template">
                        <div>
                            <div class="oscar-sorter">
                                <i class=" icon-sort"></i>
                                Tier les résultats par :
                                <a @click.prevent="order('dateUpload')" href="#" :class="cssSort('dateUpload')" class="oscar-sorter-item">
                                    Date d'upload
                                    <i class="icon-angle-down" v-show="sortDirection == 1"></i>
                                    <i class="icon-angle-up" v-show="sortDirection == -1"></i>
                                </a>
                                <a @click.prevent="order('fileName')" href="#" :class="cssSort('fileName')" class="oscar-sorter-item">
                                    Nom du fichier
                                    <i class="icon-angle-down" v-show="sortDirection == 1"></i>
                                    <i class="icon-angle-up" v-show="sortDirection == -1"></i>
                                </a>
                                <a @click.prevent="order('categoryText')" href="#" :class="cssSort('categoryText')" class="oscar-sorter-item">
                                    Type de document
                                    <i class="icon-angle-down" v-show="sortDirection == 1"></i>
                                    <i class="icon-angle-up" v-show="sortDirection == -1"></i>
                                </a>
                            </div>
                            <document v-for="document in sortedDocument" :document="document" :documentTypes="documentTypes"></document>
                        </div>
                    </script>

                    <section id="documents-list" class="lc pending">
                        <div class="lc-mask">
                            <div class="lc-alert">
                                Error message
                            </div>
                            <div class="lc-loader">
                                <span class="text">Chargement</span>
                            </div>
                            <div class="lc-content"></div>
                        </div>
                    </section>

                    <script>
                        require(['Documents'], function(OscarDocument) {
                            OscarDocument({
                                urlDocumentType: '<?= $this->url('contractdocument/document-change-type') ?>',
                                el: '#documents-list',
                                documentTypes: <?= $documentTypes ?>,
                                template: "#documents-list-template",
                                url: '<?= $this->url('contract/documents-json', ['id' => $entity->getId()]) ?>'
                            });
                        });
                    </script>
                </section>
            <?php endif; ?>
        </div>
        <div class="col-md-4">

            <?php if( $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_MILESTONE_SHOW, $entity) ): ?>
            <div id="milestones"></div>
            <?php if( $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_NOTIFICATIONS_SHOW, $entity) ): ?>
                <a href="<?= $this->url('contract/notifications', ['id' => $entity->getId()]) ?>" class="btn btn-default">
                    <i class="icon-bell"></i>
                    Voir les notifications planifiées
                </a>
            <?php endif; ?>
            <script>
                require(['ActivityModel', 'vue','vue-resource', 'mm','milestones'], function(
                        ActivityModel,
                        Vue,
                        VueResource,
                        moment,
                        milestone)
                {
                    Vue.use(VueResource);


                    new Vue({ data: ActivityModel });

                    Vue.filter('moment', function(value){
                        var m = moment(value.date);
                       return m.format('D MMMM YYYY') + ' (' + m.fromNow() +')'
                    });

                    var milestonesVue = new Vue({
                        render(h){
                            return h(milestone.default, {
                                props: {
                                    url: '<?= $this->url("milestones/activity", ['idactivity' => $entity->getId()]) ?>',
                                    moment: moment,
                                    model: ActivityModel
                                }
                            })
                        }
                    }).$mount('#milestones');

                })
            </script>
            <?php endif; ?>
            <?php if( $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_PAYMENT_SHOW, $entity) ): ?>
                <nav>
                    <a class="btn btn-primary" href="<?= $this->url("contract/list-spent", ['id' => $entity->getId()]) ?>">Voir les dépenses</a>
                    <a class="btn btn-primary" href="<?= $this->url("contract/estimated-spent", ['id' => $entity->getId()]) ?>">Prévisionnel (Aperçu)</a>
                </nav>
            <?php endif; ?>

            <?php if( $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_PAYMENT_SHOW, $entity) ): ?>
                <div id="payments"></div>
                <div>
                    
                    <h3>Assiette Subventionnable : <strong><?= $entity->getAssietteSubventionnable() ?></strong></h3>
                    <h3>Note financière</h3>
                    <blockquote><?= $entity->getNoteFinanciere() ?></blockquote>
                </div>

                <script>
                    require(['ActivityModel', 'vue','vue-resource', 'mm','payments', 'VueFilters'], function(ActivityModel, Vue, VueResource, moment, payments, VueFilters){
                        Vue.use(VueResource);

                        Vue.filter('moment', function(value){
                            var m = moment(value.date);
                            return m.format('D MMMM YYYY') + ' (' + m.fromNow() +')'
                        });

                        Vue.filter('money', VueFilters.default.money);
                        // Vue.filter('money', function(value){
                        //     return VueFilters.default.money(value);
                        // });

                        new Vue({ data: ActivityModel });

                        new Vue({
                            render(h){
                                return h(payments.default, {
                                    props: {
                                        url: '<?= $this->url("activitypayment", ['idactivity' => $entity->getId()]) ?>',
                                        moment: moment,
                                        amount: <?= $entity->getAmount() ?>,
                                        currencies: <?= json_encode($currencies) ?>,
                                        currency: <?= json_encode($entity->getCurrency()->asArray()) ?>,
                                        model: ActivityModel,
                                        manage: <?= $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_PAYMENT_MANAGE, $entity) ? 'true' : 'false' ?>
                                    }
                                })
                            }
                        }).$mount('#payments')
                    });
                </script>
            <?php endif; ?>
        </div>
    </div>
    <hr>
    <?php if( $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_TIMESHEET_VIEW, $entity) ): ?>
        <?php if( count($entity->getWorkPackages()) == 0 ) : ?>

        <?php else: ?>
            <h2><i class="icon-calendar"></i> Feuilles de temps</h2>
        <?php if( !$entity->getProject() ): ?>
        <div class="alert alert-danger">
            <i class="icon-attention-1"></i>
            Cette activité doit être associée à un projet pour garantir le fonctionnement des feuilles de temps.
        </div>
        <?php endif; ?>
        <h3>Validateurs</h3>
        <div class="row">
            <div class="col-md-4">
                <h4>Activité</h4>
                <?php if(count($validatorsPrj)):?>
                    <?php foreach($validatorsPrj as $validateur): ?>
                        <article class="card">
                            <?= $validateur ?>
                        </article>
                    <?php endforeach; ?>
                <?php else: ?>
                    <div class="alert alert-danger">
                        Aucun validateur scientifique identifié pour cette activité
                    </div>
                <?php endif; ?>
            </div>
            <div class="col-md-4">
                <h4>Scientifique</h4>
                <?php if(count($validatorsSci)):?>
                    <?php foreach($validatorsSci as $validateur): ?>
                        <article class="card">
                            <?= $validateur ?>
                        </article>
                    <?php endforeach; ?>
                <?php else: ?>
                    <div class="alert alert-danger">
                        Aucun validateur scientifique identifié pour cette activité
                    </div>
                <?php endif; ?>
            </div>
            <div class="col-md-4">
                <h4>Administratif</h4>
                <?php if(count($validatorsAdm)):?>
                    <?php foreach($validatorsAdm as $validateur): ?>
                        <article class="card">
                            <?= $validateur ?>
                        </article>
                    <?php endforeach; ?>
                <?php else: ?>
                    <div class="alert alert-danger">
                        Aucun validateur administratif identifié pour cette activité
                    </div>
                <?php endif; ?>
            </div>
        </div>

        <h3>Synthèse de déclarations</h3>

        <!--
        <a href="<?= $this->url('timesheet/activity', ['id' => $entity->getId()]) ?>"
           class="btn btn-primary btn-large">
            <i class="icon-calendar"></i>
            Synthèse générale
        </a>-->

            <a href="<?= $this->url('timesheet/synthesis') ?>?activity_id=<?= $entity->getId() ?>" class="btn btn-primary btn-large">
            <i class="icon-calendar"></i>
            Synthèse pour cette activité
        </a>



        <h3>Déclarants</h3>
        <?php
        $declarers = [];
        foreach ($entity->getPersonsDeep() as $personActivity): ?>
            <?php if( $entity->hasDeclarant($personActivity->getPerson()) ):
                $declarers[] = $personActivity->getPerson()->toJson();
                $hasDeclaration = $personActivity->getPerson()->hasDeclarationIn($entity);
                ?>

                <a href="<?= $this->url('timesheet/resume') ?>?person_id=<?= $personActivity->getPerson()->getId() ?>"
                   class="btn <?=  $hasDeclaration ? 'btn-primary' : 'btn-default disabled' ?>">
                    <i class="icon-calendar"></i>
                    <?= $personActivity->getPerson() ?>
                    <?php if(!$hasDeclaration): ?>
                    <small>(N'a encore rien déclaré)</small>
                    <?php endif; ?>
                </a>
            <?php endif; ?>
        <?php endforeach; ?>
            <?php /* TODO Gestion des référents depuis la fiche activité ****
 if($this->grant()->privilege(\Oscar\Provider\Privileges::PERSON_EDIT)): ?>
            <div id="referents"></div>
            <script>
                require(['vue', 'vue-resource', 'ReferentUI'], function(Vue, VueResource, ReferentUI){
                    new Vue({
                        el: '#referents',
                        render(h){ return h(ReferentUI.default, { props: {
                                persons: <?= json_encode($declarers) ?>
                            }}) }
                    })
                });
            </script>
        <?php endif; /*****/ ?>
    <?php endif; ?>

<?php endif; ?>



<?php
$manage = $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_WORKPACKAGE_MANAGE, $entity);
if( $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_WORKPACKAGE_SHOW, $entity) ): ?>
    <section>
        <h2><i class="icon-archive"></i> Lot de travail</h2>
        <?php if( !($entity->getProject() && $entity->getAcronym()) ): ?>
        <div class="alert alert-danger">
            <?php if( !$entity->getProject() ): ?>
                <p>L'activité doit appartenir à un projet pour activer les lots de travail</p>
            <?php elseif (!$entity->getAcronym() ): ?>
                <p>Le projet <strong><?= $entity->getProject() ?></strong> n'a pas d'acronyme !</p>
            <?php endif; ?>
        </div>
        <?php else: ?>
        <div id="workpackages"></div>
        <?php if( $this->grant()->privilege(\Oscar\Provider\Privileges::ACTIVITY_WORKPACKAGE_SHOW, $entity) ): ?>
            <script>
                require(['vue', 'vue-resource', 'bootbox', 'Workpackage'], function(Vue, VueResource, Bootbox, Workpackage){
                    Vue.use(VueResource);

                    Vue.http.options.emulateJSON = true;
                    Vue.http.options.emulateHTTP = true;

                    Vue.filter('heures', function(v){
                        var heures = parseInt(v);
                        var minutes = Math.round((parseFloat(v) - heures)*60);
                        if( minutes == 0 ) minutes = '';
                        else if (minutes < 10) minutes = ':0' +minutes;
                        else minutes = ':'+minutes
                       return heures+minutes;
                    });

                    // Transmission du jeton
                    Vue.http.interceptors.push((request, next) => {
                        request.headers.set('X-CSRF-TOKEN', '<?= $tokenValue ?>');
                        request.headers.set('Authorization', 'OSCAR TOKEN');
                        next();
                    });

                    new Vue({
                        render: function(h){
                            return h(Workpackage.default,{ props: {
                                    url: '<?= $this->url('workpackage/rest', ['idactivity' => $entity->getId()]) ?>',
                                    token: '<?= $tokenValue ?>',
                                    isValidateur: true,
                                    editable: true,
                                    Bootbox: Bootbox,
                                }})
                        },
                        el: '#workpackages'
                    })
                });
            </script>
        <?php endif; ?>
        <?php endif; ?>
    </section>

    <?php endif; ?>

    <?php if( $this->grant()->privilege(\Oscar\Provider\Privileges::MAINTENANCE_MENU_ADMIN) ): ?>
        <hr/>
    <section id="logs">
        <h2><i class="icon-signal"></i> Log</h2>
            <?= $this->partial('oscar/activity-log/frag-list.phtml',
                ['entities' => $traces]) ?>
    </section>
    <?php endif; ?>

    <script id="enrollTpl" type="template" >
        <article class="stack">
            <span class="stacker">{{ label }}</span>
        <ul class="list-stacked">
            {{#each roles}}
        <li class="stacked">{{ label }}</li>
        {{/each}}
        </ul>
        </article>
    </script>

    <style>
        .stack {
            text-shadow: -1px 1px 0 #fff;
            background:  #eee;
            padding: 4px;
            margin: 1em;
            border-radius: 4px;
            box-shadow: 0 0 8px rgba(0,0,0,.1);
            display: inline-block;
        }
        .stacker {
            font-weight: 600;}
        .stacker:after {
            content: ' : ';}
        .list-stacked { display: inline; margin: 0; padding: 0}
        .stacked {
            display: inline;
            margin: 0 0;
            padding: 4px;
            background: #ccc;
            border-radius: 4px;
            font-size: .9em;}
    </style>

    <script>
       var view;
        Initer.ready(function(){

           require(['modalform'], function(modalform){
                modalform($('body'));
                modalform.modalify('[data-activitydate-add]',
                    function(){
                        milestones.fetch();
                    }
                );
            });
        });
    </script>
</div>

<div id="activityclone"></div>
<script>
    require(['activityclone', 'vue'], function(Activityclone, Vue){
        var activityClone = new Vue({
            render(h){
                return h(Activityclone.default, {
                    props: {
                        foo: this.foo,
                        displayed: false,
                        activity: <?= json_encode($entity->toArray()) ?>,
                        urlPost: '<?= $this->url('contract/duplicate', ['id'=>$entity->getId()]) ?>'
                    }
                });
            }
        }).$mount('#activityclone');

        activityClone.$on('test', function(){
            console.log('test déclenché');
        })

        document.querySelector('#cloneBtn').addEventListener('click', function(e){
            console.log(activityClone.$children[0]);
            console.log(activityClone.$children[0].$data);
            console.log(activityClone.$children[0].$data.displayed);
            e.preventDefault();
            activityClone.$children[0].$data.displayed = true;
//            activityClone.$.default.displayed = true;
        });
    });
</script>

